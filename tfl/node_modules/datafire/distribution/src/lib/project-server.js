'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var express = require('express');
var cors = require('cors');
var swaggerMiddleware = require('swagger-express-middleware');
var openapiUtil = require('../util/openapi');
var Response = require('./response');
var Context = require('./context');

function defaultResponse(body) {
  var statusCode = 200;
  if (body instanceof Error) {
    statusCode = body.statusCode || 500;
    body = { error: body.message };
  }
  return new Response({
    statusCode: statusCode,
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body, null, 2)
  });
}

var ProjectServer = function () {
  function ProjectServer(project) {
    _classCallCheck(this, ProjectServer);

    this.project = project;
    this.app = express();
  }

  _createClass(ProjectServer, [{
    key: 'start',
    value: function start(port) {
      var _this = this;

      if (this.close) this.close();
      return this.getRouter().then(function (r) {
        _this.app.use(r);
        return new Promise(function (resolve, reject) {
          var server = _this.app.listen(port, function (err) {
            if (err) return reject(err);
            resolve();
          });
          _this.close = server.close.bind(server);
        });
      });
    }
  }, {
    key: 'getRouter',
    value: function getRouter() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var router = express.Router();
        router.use('/openapi.json', function (req, res) {
          res.set("Content-type", "application/json; charset=utf-8");
          res.send(JSON.stringify(_this2.project.openapi, null, 2));
        });
        var middleware = new swaggerMiddleware.Middleware(_this2.router);
        middleware.init(_this2.project.openapi, function (err) {
          if (err) return reject(err);
          router.use(middleware.metadata());
          if (_this2.project.options.cors) {
            router.use(middleware.CORS());
          }
          router.use(middleware.parseRequest(router, { json: { strict: false } }), middleware.validateRequest());
          router.use(function (err, req, res, next) {
            res.set("Content-type", "application/json; charset=utf-8");
            res.status(err.status || 500);
            res.send(JSON.stringify({ error: err.message || "Unknown Error" }, null, 2));
          });
          _this2.setPaths(router);
          resolve(router);
        });
      });
    }
  }, {
    key: 'setPaths',
    value: function setPaths(router) {
      for (var path in this.project.paths) {
        for (var method in this.project.paths[path]) {
          if (method === 'parameters') continue;
          var op = this.project.paths[path][method];
          var allAuthorizers = Object.assign({}, this.project.authorizers || {}, op.authorizers || {});
          var expressPath = path.replace(openapiUtil.PATH_PARAM_REGEX, ':$1');
          var swaggerOp = this.project.openapi.paths[path][method];
          router[method](expressPath, this.requestHandler(method, path, op, swaggerOp, allAuthorizers));
          if (op.extendPath) {
            for (var i = 0; i < op.extendPath; ++i) {
              path += '/{' + openapiUtil.EXTENDED_PATH_PARAM_NAME + i + '}';
              expressPath += '/:' + openapiUtil.EXTENDED_PATH_PARAM_NAME + i;
              swaggerOp = this.project.openapi.paths[path][method];
              router[method](expressPath, this.requestHandler(method, path, op, swaggerOp, allAuthorizers));
            }
          }
        }
      }
    }
  }, {
    key: 'requestHandler',
    value: function requestHandler(method, path, op, swaggerOp, authorizers) {
      var _this3 = this;

      var parameters = swaggerOp.parameters || [];
      return function (req, res) {
        var event = _this3.project.monitor.startEvent('http', {
          path: path, method: method,
          id: method.toUpperCase() + ' ' + path
        });
        var respond = function respond(result, success) {
          event.success = success;
          _this3.project.monitor.endEvent(event);
          if (!(result instanceof Response)) {
            result = defaultResponse(result);
          }
          result.send(res);
        };
        var input = op.input;
        if (op.input === undefined) {
          input = {};
          var extendedPathParts = [];
          parameters.forEach(function (param) {
            if (param.in === 'body') {
              Object.assign(input, req.body, input);
            } else {
              var val = null;
              if (param.in === 'query') val = req.query[param.name];else if (param.in === 'header') val = req.get(param.name);else if (param.in === 'path') val = req.params[param.name];else if (param.in === 'formData') val = req.body[param.name];

              var pathPartMatch = param.name.match(openapiUtil.EXTENDED_PATH_PARAM_REGEX);
              if (param.in === 'path' && pathPartMatch) {
                extendedPathParts[+pathPartMatch[1]] = val;
              } else {
                input[param.name] = val;
              }
            }
          });
          if (extendedPathParts.length) {
            var extendedPath = extendedPathParts.join('/');
            var paramToEdit = null;
            var finalParamMatch = path.match(openapiUtil.EXTENDED_PATH_FINAL_PARAM_REGEX);
            if (finalParamMatch) {
              paramToEdit = parameters.filter(function (p) {
                return p.name === finalParamMatch[1];
              })[0];
              if (!paramToEdit) throw new Error("Parameter " + finalParamMatch[1] + " not found");
              input[paramToEdit.name] += '/' + extendedPath;
            } else {
              input.extendedPath = extendedPath;
            }
          }
        }
        var context = new Context({
          type: 'http',
          accounts: Object.assign({}, _this3.project.accounts, op.accounts),
          request: {
            query: req.query,
            headers: req.headers,
            body: req.body,
            path: req.path,
            method: req.method
          }
        });
        Promise.all(Object.keys(authorizers).map(function (key) {
          var authorizer = authorizers[key];
          if (authorizer === null || context.accounts[key]) return Promise.resolve();
          return authorizer.action.run(input, context).then(function (acct) {
            if (acct instanceof Response) throw acct;
            if (acct) context.accounts[key] = acct;
          });
        })).then(function (_) {
          return op.action.run(input, context);
        }).then(function (result) {
          respond(result, true);
        }, function (result) {
          if (!(result instanceof Error || result instanceof Response)) {
            result = new Error(result);
          }
          respond(result, false);
        });
      };
    }
  }]);

  return ProjectServer;
}();

module.exports = ProjectServer;