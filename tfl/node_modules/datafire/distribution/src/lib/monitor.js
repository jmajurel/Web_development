'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MAX_EVENTS = 1000;
var logger = require('../util/logger');
var verbose = require('yargs').argv.verbose;

var Monitor = function () {
  function Monitor(opts) {
    _classCallCheck(this, Monitor);

    this.events = {
      http: [],
      task: []
    };
  }

  _createClass(Monitor, [{
    key: 'startEvent',
    value: function startEvent(type) {
      var evt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      evt.type = type;
      evt.start = new Date();
      var events = this.events[evt.type];
      if (events.length >= MAX_EVENTS) events.shift();
      events.push(evt);
      return evt;
    }
  }, {
    key: 'endEvent',
    value: function endEvent(evt) {
      evt.end = new Date();
      evt.duration = evt.end.getTime() - evt.start.getTime();
      if (verbose) {
        this.log(evt);
      }
    }
  }, {
    key: 'log',
    value: function log(event) {
      logger.logInfo(event.type + ": " + (event.id || 'unknown'));
      logger.log("duration: " + event.duration);
      if (event.success) logger.logSuccess();else logger.logError();
    }
  }]);

  return Monitor;
}();

module.exports = Monitor;