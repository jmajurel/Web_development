"use strict";

var nodepath = require('path');
var Ajv = require('ajv');
var Response = require('./response');
var Context = require('./context');
var util = require('../util');

/**
 * Creates a new Action
 * @class Action
 * @param {Object} options
 * @param {Function} options.handler
 * @param {string} options.title
 * @param {string} options.description
 * @param {Object} options.inputSchema - JSON Schema
 * @param {Array} options.inputs
 * @param {Object} options.inputs[] - JSON Schema
 * @param {Object} outputSchema - JSON Schema
 */
var Action = module.exports = function (opts) {
  opts = opts || {};
  this.handler = opts.handler || function (_) {
    return Promise.resolve(null);
  };
  this.id = opts.id || 'anonymous';
  this.title = opts.title || '';
  this.description = opts.description || '';
  this.outputSchema = opts.outputSchema || {};
  this.inputSchema = opts.inputSchema || {};
  this.inputs = opts.inputs || null;
  this.security = opts.security || {};

  if (opts.inputs) {
    this.inputSchema = util.schemas.getSchemaFromArray(opts.inputs);
  }
  this.ajv = opts.ajv || new Ajv({
    useDefaults: true,
    format: false,
    extendRefs: true
  });
  this.validateInput = this.ajv.compile(this.inputSchema);
};

Action.fromName = function (name, directory) {
  var integrations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var isFile = /^\.?\//.test(name);
  if (isFile) {
    var _action = require(nodepath.join(directory, name));
    if (!(_action instanceof Action)) _action = new Action(_action);
    return _action;
  }
  var slash = name.indexOf('/');
  if (slash === -1) throw new Error("Could not find action " + name);
  var integrationName = name.substring(0, slash);
  var Integration = require('./integration');
  var integration = integrations[integrationName] || Integration.fromName(name.substring(0, slash));
  var action = integration.action(name.substring(slash + 1, name.length));
  return action;
};

Action.prototype.run = function (input, ctx) {
  var _this = this;

  ctx = ctx || new Context();
  if (input === undefined) input = null;
  if (this.inputs && input === null) input = {};
  if (!input && this.inputSchema.type === 'object' && !this.inputSchema.required) {
    input = {};
  }
  var valid = this.validateInput(input);
  if (!valid) {
    var error = new Error(this.ajv.errorsText(this.validateInput.errors));
    error.statusCode = 400;
    return Promise.reject(error);
  }

  for (var key in this.security) {
    var sec = this.security[key];
    if (sec && !sec.optional && !ctx.accounts[key]) {
      return Promise.reject(new Error("Account " + key + " not specified for action " + this.id + ". Did you remember to pass in the 'context' object?"));
    }
  }

  return Promise.resolve().then(function (_) {
    var ret = _this.handler(input, ctx);
    if (ret === undefined) throw new Error("Handler must return a Promise, Response, or value");
    return ret;
  });
};

Action.fromOpenAPI = require('./openapi-action');